"""autogenerated by genpy from roswifibot/WStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class WStatus(genpy.Message):
  _md5sum = "37bcaf258748a50f0e114a698e6097e9"
  _type = "roswifibot/WStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 battery_level
float64 current
int32 ADC1
int32 ADC2
int32 ADC3
int32 ADC4
float64 speed_front_left
float64 speed_front_right
float64 odometry_left
float64 odometry_right
int32 version
int32 relay1

"""
  __slots__ = ['battery_level','current','ADC1','ADC2','ADC3','ADC4','speed_front_left','speed_front_right','odometry_left','odometry_right','version','relay1']
  _slot_types = ['float64','float64','int32','int32','int32','int32','float64','float64','float64','float64','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       battery_level,current,ADC1,ADC2,ADC3,ADC4,speed_front_left,speed_front_right,odometry_left,odometry_right,version,relay1

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.battery_level is None:
        self.battery_level = 0.
      if self.current is None:
        self.current = 0.
      if self.ADC1 is None:
        self.ADC1 = 0
      if self.ADC2 is None:
        self.ADC2 = 0
      if self.ADC3 is None:
        self.ADC3 = 0
      if self.ADC4 is None:
        self.ADC4 = 0
      if self.speed_front_left is None:
        self.speed_front_left = 0.
      if self.speed_front_right is None:
        self.speed_front_right = 0.
      if self.odometry_left is None:
        self.odometry_left = 0.
      if self.odometry_right is None:
        self.odometry_right = 0.
      if self.version is None:
        self.version = 0
      if self.relay1 is None:
        self.relay1 = 0
    else:
      self.battery_level = 0.
      self.current = 0.
      self.ADC1 = 0
      self.ADC2 = 0
      self.ADC3 = 0
      self.ADC4 = 0
      self.speed_front_left = 0.
      self.speed_front_right = 0.
      self.odometry_left = 0.
      self.odometry_right = 0.
      self.version = 0
      self.relay1 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2d4i4d2i.pack(_x.battery_level, _x.current, _x.ADC1, _x.ADC2, _x.ADC3, _x.ADC4, _x.speed_front_left, _x.speed_front_right, _x.odometry_left, _x.odometry_right, _x.version, _x.relay1))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.battery_level, _x.current, _x.ADC1, _x.ADC2, _x.ADC3, _x.ADC4, _x.speed_front_left, _x.speed_front_right, _x.odometry_left, _x.odometry_right, _x.version, _x.relay1,) = _struct_2d4i4d2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2d4i4d2i.pack(_x.battery_level, _x.current, _x.ADC1, _x.ADC2, _x.ADC3, _x.ADC4, _x.speed_front_left, _x.speed_front_right, _x.odometry_left, _x.odometry_right, _x.version, _x.relay1))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.battery_level, _x.current, _x.ADC1, _x.ADC2, _x.ADC3, _x.ADC4, _x.speed_front_left, _x.speed_front_right, _x.odometry_left, _x.odometry_right, _x.version, _x.relay1,) = _struct_2d4i4d2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d4i4d2i = struct.Struct("<2d4i4d2i")
